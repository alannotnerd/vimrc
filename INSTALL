#!/usr/bin/env python3

from subprocess import run, check_output
from os import path, listdir, mkdir
from shutil import which
from pathlib import Path


def path_of(file):
    return path.join(path.dirname(__file__), file)


def os_name():
    if bin_exists("uname") and str(check_output("uname")) == "DarWin":
        return "macos"

    if bin_exists("hostnamectl") and str(
            check_output("hostnamectl")).find("Arch Linux"):
        return "arch"

    return "unknown"


def install_zsh():
    os = os_name()
    if os == "arch":
        run(["yay", "-Sy", "zsh"])


def bin_exists(bin):
    out = which(bin)
    return out


def link(src, target, force=False, os=None):
    if os and os != os_name():
        pass

    if force or not path.exists(target):
        print(f"Configure {src}")
        Path(path.dirname(target)).mkdir(parents=True, exist_ok=True)
        run(["ln", "-s", path_of(src), target])
    else:
        print(f"Skip {src}")


# create nvim symlinks
link("nvim", path.expandvars("$HOME/.config/nvim"))
link("zellij", path.expandvars("$HOME/.config/zellij"))

# create alacritty symlinks
link("alacritty/alacritty.yml",
     path.expandvars("$HOME/.config/alacritty/alacritty.yml"))
link("alacritty/themes", path.expandvars("$HOME/.config/alacritty/themes"))
link("alacritty/keybindings/macos.yml",
     path.expandvars("$HOME/.config/alacritty/keybindings.yml"),
     os="macos")

# create tools symbol link
tools_path = path_of("tools")
for tool in listdir(tools_path):
    link(f"tools/{tool}", path.expandvars(f"$HOME/.local/bin/{tool}"))

if not bin_exists("zsh"):
    print("Zsh not found. Installing zsh...")
    install_zsh()

link("zsh/init.zsh", path.expandvars("$HOME/.zshrc"))
link("zsh/starship.toml", path.expandvars("$HOME/.config/starship.toml"))
