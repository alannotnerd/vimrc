#!/usr/bin/env python3

from subprocess import run
from os import path, listdir
from shutil import which, rmtree
from pathlib import Path
import platform
from sys import exit, stderr


def path_of(file):
    return path.join(path.dirname(__file__), file)


def os_name():
    os_name = platform.system()

    if os_name == "Windows":
        return "Windows"
    elif os_name == "Darwin":
        return "macOS"
    elif os_name == "Linux":
        # For more specific details on Linux distributions
        if bin_exists("yay"):
            return "arch"
        if bin_exists("apt"):
            return "ubuntu"
        else:
            try:
                with open("/etc/os-release") as f:
                    os_release = f.read().lower()
                    return "ubuntu" in os_release
            except:
                return "linux"
    else:
        return os_name


def bin_exists(bin):
    out = which(bin)
    return out


def link(src, target, force=False, os=None):
    if os and os != os_name():
        pass

    if force:
        if Path(target).is_dir() and not Path(target).is_symlink():
            rmtree(target)
        else:
            Path(target).unlink()

    if not path.exists(target):
        print(f"Configure {src} -> {target}")
        Path(path.dirname(target)).mkdir(parents=True, exist_ok=True)
        run(["ln", "-s", path_of(src), target])
    else:
        print(f"Skip {src}")


def yay(pkg, bin=None):
    os = os_name()
    if bin_exists(bin if bin else pkg):
        return
    if os == "arch":
        run(["yay", "-Sy", "--noconfirm", pkg])
    else:
        print(f"Please install {pkg} manually", file=stderr)
        exit(1)


def install_unzip():
    os = os_name()
    if bin_exists("unzip"):
        return
    if os == "arch":
        yay("unzip")
    elif os == "ubuntu":
        run(["sudo", "apt", "install", "-y", "unzip"])
    else:
        print("Please install unzip manually", file=stderr)
        exit(1)

def install_make():
    os = os_name()
    if bin_exists("make"):
        return
    if os == "arch":
        yay("make")
    elif os == "ubuntu":
        run(["sudo", "apt", "install", "-y", "make"])
    else:
        print("Please install make manually", file=stderr)
        exit(1)


def install_zsh():
    os = os_name()
    if bin_exists("zsh"):
        return
    if os == "arch":
        run(["yay", "-Sy", "--noconfirm", "zsh"])
    elif os == "ubuntu":
        run(["sudo", "apt", "install", "-y", "zsh"])
    else:
        print("Please install zsh manually", file=stderr)
        exit(1)


def install_nvim():
    os = os_name()
    if bin_exists("nvim"):
        return
    if os == "arch":
        run(["yay", "-Sy", "--noconfirm", "neovim"])
    elif os == "ubuntu":
        run(["sudo", "add-apt-repository", "ppa:neovim-ppa/unstable"])
        run(["sudo", "apt", "install", "-y", "neovim"])
    else:
        print("Please install neovim manually", file=stderr)
        exit(1)


def install_cc():
    os = os_name()
    if bin_exists("cc"):
        return
    if os == "arch":
        run(["yay", "-Sy", "--noconfirm", "clang"])
    elif os == "ubuntu":
        run(["sudo", "apt", "install", "-y", "clang"])
    else:
        print("Please install clang manually", file=stderr)
        exit(1)


install_zsh()
install_cc()
install_nvim()
install_unzip()
install_make()

# create nvim symlinks
link("nvim", path.expandvars("$HOME/.config/nvim"))
link("zellij", path.expandvars("$HOME/.config/zellij"))

# init wezterm config
link("wezterm", path.expandvars("$HOME/.config/wezterm"))

# create alacritty symlinks
link(
    "alacritty/alacritty.toml",
    path.expandvars("$HOME/.config/alacritty/alacritty.toml"),
)
link("alacritty/themes", path.expandvars("$HOME/.config/alacritty/themes"))
link(
    "alacritty/keybindings/macos.toml",
    path.expandvars("$HOME/.config/alacritty/keybindings.toml"),
    os="macos",
)

# create tools symbol link
tools_path = path_of("tools")
for tool in listdir(tools_path):
    link(f"tools/{tool}", path.expandvars(f"$HOME/.local/bin/{tool}"))

if not bin_exists("zsh"):
    print("Zsh not found. Installing zsh...")
    install_zsh()

link("zsh/init.zsh", path.expandvars("$HOME/.zshrc"))
link("zsh/starship.toml", path.expandvars("$HOME/.config/starship.toml"))
